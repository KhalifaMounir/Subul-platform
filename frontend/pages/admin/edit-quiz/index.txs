import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import EditQuiz from '@/components/admin/EditQuiz';

export default function AdminEditQuiz() {
  const [isModalOpen, setIsModalOpen] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [initialData, setInitialData] = useState<any>(null);
  const router = useRouter();
  const { cert_id, quiz_id } = router.query;

  useEffect(() => {
    if (cert_id && quiz_id) {
      // Fetch existing quiz data
      fetchQuizData();
    }
  }, [cert_id, quiz_id]);

  const fetchQuizData = async () => {
    try {
      // You might need to implement a GET endpoint for individual quiz
      // For now, using placeholder data
      setInitialData({
        question: 'ما هو...؟',
        options: ['خيار 1', 'خيار 2', 'خيار 3'],
        answer: 'خيار 1'
      });
    } catch (error) {
      console.error('Failed to fetch quiz data:', error);
      setError('فشل في تحميل بيانات السؤال');
    }
  };

  const handleSuccess = (quiz: any) => {
    console.log('Quiz updated:', quiz);
    setError(null);
    router.back();
  };

  const handleClose = () => {
    setIsModalOpen(false);
    router.back();
  };

  const certIdNumber = typeof cert_id === 'string' ? parseInt(cert_id, 10) : undefined;
  const quizIdNumber = typeof quiz_id === 'string' ? parseInt(quiz_id, 10) : undefined;

  if (!certIdNumber || !quizIdNumber || isNaN(certIdNumber) || isNaN(quizIdNumber)) {
    return <div>معرف غير صالح</div>;
  }

  return (
    <>
      {isModalOpen && initialData && (
        <EditQuiz
          certId={certIdNumber}
          quizId={quizIdNumber}
          initialData={initialData}
          onClose={handleClose}
          onSuccess={handleSuccess}
          error={error}
        />
      )}
    </>
  );
}