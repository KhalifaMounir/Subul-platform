 import { useState } from 'react';
import { 
  Plus, 
  Trash2, 
  Upload, 
  Play, 
  BookOpen, 
  Users, 
  TrendingUp, 
  Settings,
  Menu,
  X,
  ChevronRight,
  Video,
  FileText,
  Cloud
} from 'lucide-react';
import styles from '@/styles/admin.module.css';

interface CourseItem {
  id: string;
  title: string;
  videoUrl: string;
}

interface CourseSubpart {
  id: string;
  title: string;
  videoUrl?: string; // Optional video for subpart
  items: CourseItem[];
}

interface CoursePart {
  id: string;
  title: string;
  videoUrl?: string; // Optional video for part
  subparts: CourseSubpart[];
}

interface Course {
  id: string;
  title: string;
  description: string;
  category: string;
  parts: CoursePart[];
  createdAt: Date;
}

const categories = [
  'الحوسبة السحابية',
  'أمازون ويب سيرفيسز (AWS)',
  'مايكروسوفت أزور (Azure)',
  'جوجل كلاود',
  'البرمجة',
  'الأمن السيبراني',
  'الذكاء الاصطناعي',
  'تطوير الويب',
  'قواعد البيانات',
  'الشبكات'
];

export default function AdminPage() {
  const [courses, setCourses] = useState<Course[]>([]);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [toastType, setToastType] = useState<'success' | 'error'>('success');
  
  // Course form state
  const [courseTitle, setCourseTitle] = useState('');
  const [courseDescription, setCourseDescription] = useState('');
  const [courseCategory, setCourseCategory] = useState('');
  const [courseParts, setCourseParts] = useState<CoursePart[]>([]);

  const generateId = () => Math.random().toString(36).substr(2, 9);

  const showToastMessage = (message: string, type: 'success' | 'error' = 'success') => {
    setToastMessage(message);
    setToastType(type);
    setShowToast(true);
    setTimeout(() => setShowToast(false), 3000);
  };

  const addPart = () => {
    const newPart: CoursePart = {
      id: generateId(),
      title: '',
      videoUrl: '',
      subparts: []
    };
    setCourseParts([...courseParts, newPart]);
  };

  const removePart = (partId: string) => {
    setCourseParts(courseParts.filter(part => part.id !== partId));
  };

  const updatePartTitle = (partId: string, title: string) => {
    setCourseParts(courseParts.map(part => 
      part.id === partId ? { ...part, title } : part
    ));
  };

  const updatePartVideo = (partId: string, videoUrl: string) => {
    setCourseParts(courseParts.map(part => 
      part.id === partId ? { ...part, videoUrl } : part
    ));
  };

  const addSubpart = (partId: string) => {
    const newSubpart: CourseSubpart = {
      id: generateId(),
      title: '',
      videoUrl: '',
      items: []
    };
    setCourseParts(courseParts.map(part => 
      part.id === partId 
        ? { ...part, subparts: [...part.subparts, newSubpart] }
        : part
    ));
  };

  const removeSubpart = (partId: string, subpartId: string) => {
    setCourseParts(courseParts.map(part => 
      part.id === partId 
        ? { ...part, subparts: part.subparts.filter(sub => sub.id !== subpartId) }
        : part
    ));
  };

  const updateSubpartTitle = (partId: string, subpartId: string, title: string) => {
    setCourseParts(courseParts.map(part => 
      part.id === partId 
        ? { 
            ...part, 
            subparts: part.subparts.map(sub => 
              sub.id === subpartId ? { ...sub, title } : sub
            )
          }
        : part
    ));
  };

  const updateSubpartVideo = (partId: string, subpartId: string, videoUrl: string) => {
    setCourseParts(courseParts.map(part => 
      part.id === partId 
        ? { 
            ...part, 
            subparts: part.subparts.map(sub => 
              sub.id === subpartId ? { ...sub, videoUrl } : sub
            )
          }
        : part
    ));
  };

  const addItem = (partId: string, subpartId: string) => {
    const newItem: CourseItem = {
      id: generateId(),
      title: '',
      videoUrl: ''
    };
    setCourseParts(courseParts.map(part => 
      part.id === partId 
        ? { 
            ...part, 
            subparts: part.subparts.map(sub => 
              sub.id === subpartId 
                ? { ...sub, items: [...sub.items, newItem] }
                : sub
            )
          }
        : part
    ));
  };

  const removeItem = (partId: string, subpartId: string, itemId: string) => {
    setCourseParts(courseParts.map(part => 
      part.id === partId 
        ? { 
            ...part, 
            subparts: part.subparts.map(sub => 
              sub.id === subpartId 
                ? { ...sub, items: sub.items.filter(item => item.id !== itemId) }
                : sub
            )
          }
        : part
    ));
  };

  const updateItemTitle = (partId: string, subpartId: string, itemId: string, title: string) => {
    setCourseParts(courseParts.map(part => 
      part.id === partId 
        ? { 
            ...part, 
            subparts: part.subparts.map(sub => 
              sub.id === subpartId 
                ? { 
                    ...sub, 
                    items: sub.items.map(item => 
                      item.id === itemId ? { ...item, title } : item
                    )
                  }
                : sub
            )
          }
        : part
    ));
  };

  const updateItemVideo = (partId: string, subpartId: string, itemId: string, videoUrl: string) => {
    setCourseParts(courseParts.map(part => 
      part.id === partId 
        ? { 
            ...part, 
            subparts: part.subparts.map(sub => 
              sub.id === subpartId 
                ? { 
                    ...sub, 
                    items: sub.items.map(item => 
                      item.id === itemId ? { ...item, videoUrl } : item
                    )
                  }
                : sub
            )
          }
        : part
    ));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!courseTitle || !courseDescription || !courseCategory) {
      showToastMessage("الرجاء ملء جميع الحقول المطلوبة", 'error');
      return;
    }

    const newCourse: Course = {
      id: generateId(),
      title: courseTitle,
      description: courseDescription,
      category: courseCategory,
      parts: courseParts,
      createdAt: new Date()
    };

    setCourses([...courses, newCourse]);
    
    // Reset form
    setCourseTitle('');
    setCourseDescription('');
    setCourseCategory('');
    setCourseParts([]);
    
    showToastMessage("تم إنشاء الدورة بنجاح");
    setActiveTab('dashboard');
  };

  const getTotalItems = (course: Course) => {
    let total = 0;
    course.parts.forEach(part => {
      // Count part video if exists
      if (part.videoUrl) total++;
      
      part.subparts.forEach(subpart => {
        // Count subpart video if exists
        if (subpart.videoUrl) total++;
        
        // Count all items
        total += subpart.items.length;
      });
    });
    return total;
  };

  return (
    <div className={styles.container}>
      <div className={styles.layout}>
        {/* Sidebar */}
        <div className={`${styles.sidebar} ${sidebarOpen ? styles.sidebarOpen : styles.sidebarClosed}`}>
          <div className={styles.sidebarHeader}>
            <div className={styles.sidebarHeaderContent}>
              {sidebarOpen && (
                <div className={styles.sidebarLogo}>
                  <Cloud size={32} color="#2563eb" />
                  <h1 className={styles.sidebarTitle}>لوحة الإدارة</h1>
                </div>
              )}
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonSmall}`}
              >
                {sidebarOpen ? <X size={16} /> : <Menu size={16} />}
              </button>
            </div>
          </div>
          
          <nav className={styles.sidebarNav}>
            <button
              onClick={() => setActiveTab('dashboard')}
              className={`${styles.navButton} ${
                activeTab === 'dashboard' ? styles.navButtonActive : styles.navButtonInactive
              }`}
            >
              <TrendingUp size={20} />
              {sidebarOpen && <span>لوحة التحكم</span>}
            </button>
            
            <button
              onClick={() => setActiveTab('create')}
              className={`${styles.navButton} ${
                activeTab === 'create' ? styles.navButtonActive : styles.navButtonInactive
              }`}
            >
              <Plus size={20} />
              {sidebarOpen && <span>إضافة دورة</span>}
            </button>
            
            <button
              onClick={() => setActiveTab('courses')}
              className={`${styles.navButton} ${
                activeTab === 'courses' ? styles.navButtonActive : styles.navButtonInactive
              }`}
            >
              <BookOpen size={20} />
              {sidebarOpen && <span>إدارة الدورات</span>}
            </button>
          </nav>
        </div>

        {/* Main Content */}
        <div className={`${styles.mainContent} ${
          sidebarOpen ? styles.mainContentWithSidebar : styles.mainContentWithCollapsedSidebar
        }`}>
          <div className={styles.contentPadding}>
            {/* Dashboard Tab */}
            {activeTab === 'dashboard' && (
              <div className={`${styles.flexCol} ${styles.gap6}`}>
                <div className={`${styles.flex} ${styles.itemsCenter} ${styles.justifyBetween}`}>
                  <h2 className={styles.text3xl}>لوحة التحكم</h2>
                  <button 
                    onClick={() => setActiveTab('create')} 
                    className={`${styles.button} ${styles.buttonPrimary}`}
                  >
                    <Plus size={16} />
                    إضافة دورة جديدة
                  </button>
                </div>

                {/* Stats Cards */}
                <div className={styles.statsGrid}>
                  <div className={styles.statCard}>
                    <div className={styles.statHeader}>
                      <span className={styles.statTitle}>إجمالي الدورات</span>
                      <BookOpen size={16} color="#6b7280" />
                    </div>
                    <div className={styles.statValue}>{courses.length}</div>
                  </div>
                  
                  <div className={styles.statCard}>
                    <div className={styles.statHeader}>
                      <span className={styles.statTitle}>إجمالي الفيديوهات</span>
                      <Video size={16} color="#6b7280" />
                    </div>
                    <div className={styles.statValue}>
                      {courses.reduce((total, course) => total + getTotalItems(course), 0)}
                    </div>
                  </div>
                  
                  <div className={styles.statCard}>
                    <div className={styles.statHeader}>
                      <span className={styles.statTitle}>التصنيفات النشطة</span>
                      <FileText size={16} color="#6b7280" />
                    </div>
                    <div className={styles.statValue}>
                      {new Set(courses.map(course => course.category)).size}
                    </div>
                  </div>
                </div>

                {/* Recent Courses */}
                <div className={styles.card}>
                  <div className={styles.cardHeader}>
                    <h3 className={styles.cardTitle}>الدورات الحديثة</h3>
                    <p className={styles.cardDescription}>آخر الدورات المضافة إلى المنصة</p>
                  </div>
                  <div className={styles.cardContent}>
                    {courses.length === 0 ? (
                      <div className={styles.emptyState}>
                        <BookOpen className={styles.emptyStateIcon} />
                        <p>لا توجد دورات بعد</p>
                        <p className={styles.textSm}>ابدأ بإضافة دورتك الأولى</p>
                      </div>
                    ) : (
                      <div className={`${styles.grid} ${styles.gridCols3} ${styles.gap4}`}>
                        {courses.slice(-6).map((course) => (
                          <div key={course.id} className={`${styles.card} ${styles.hoverShadow} ${styles.transition}`}>
                            <div className={styles.cardHeader}>
                              <div className={`${styles.flex} ${styles.itemsCenter} ${styles.justifyBetween} ${styles.mb2}`}>
                                <span className={styles.badge}>{course.category}</span>
                                <span className={`${styles.textSm} ${styles.textGray500}`}>
                                  {course.createdAt.toLocaleDateString('ar-SA')}
                                </span>
                              </div>
                              <h4 className={`${styles.textLg} ${styles.fontMedium}`}>{course.title}</h4>
                            </div>
                            <div className={styles.cardContent}>
                              <p className={`${styles.textSm} ${styles.textGray600} ${styles.mb4} ${styles.lineClamp2}`}>
                                {course.description}
                              </p>
                              <div className={`${styles.flex} ${styles.itemsCenter} ${styles.justifyBetween} ${styles.textSm} ${styles.textGray500}`}>
                                <span>{course.parts.length} جزء</span>
                                <span>{getTotalItems(course)} فيديو</span>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Create Course Tab */}
            {activeTab === 'create' && (
              <div className={`${styles.flexCol} ${styles.gap6}`}>
                <div className={`${styles.flex} ${styles.itemsCenter} ${styles.justifyBetween}`}>
                  <h2 className={styles.text3xl}>إضافة دورة جديدة</h2>
                </div>

                <form onSubmit={handleSubmit} className={`${styles.flexCol} ${styles.gap6}`}>
                  <div className={styles.card}>
                    <div className={styles.cardHeader}>
                      <h3 className={styles.cardTitle}>معلومات الدورة الأساسية</h3>
                      <p className={styles.cardDescription}>أدخل المعلومات الأساسية للدورة</p>
                    </div>
                    <div className={styles.cardContent}>
                      <div className={`${styles.grid} ${styles.gridCols2} ${styles.gap4} ${styles.mb4}`}>
                        <div className={styles.formGroup}>
                          <label htmlFor="courseTitle" className={styles.label}>عنوان الدورة *</label>
                          <input
                            id="courseTitle"
                            type="text"
                            value={courseTitle}
                            onChange={(e) => setCourseTitle(e.target.value)}
                            placeholder="مثال: مقدمة في البرمجة"
                            className={styles.input}
                            required
                          />
                        </div>
                        
                        <div className={styles.formGroup}>
                          <label htmlFor="courseCategory" className={styles.label}>التصنيف *</label>
                          <select 
                            value={courseCategory} 
                            onChange={(e) => setCourseCategory(e.target.value)}
                            className={styles.select}
                            required
                          >
                            <option value="">اختر التصنيف</option>
                            {categories.map((category) => (
                              <option key={category} value={category}>
                                {category}
                              </option>
                            ))}
                          </select>
                        </div>
                      </div>
                      
                      <div className={styles.formGroup}>
                        <label htmlFor="courseDescription" className={styles.label}>وصف الدورة *</label>
                        <textarea
                          id="courseDescription"
                          value={courseDescription}
                          onChange={(e) => setCourseDescription(e.target.value)}
                          placeholder="وصف مفصل عن محتوى الدورة وما سيتعلمه الطلاب"
                          className={styles.textarea}
                          required
                        />
                      </div>
                    </div>
                  </div>

                  <div className={styles.card}>
                    <div className={styles.cardHeader}>
                      <div className={`${styles.flex} ${styles.itemsCenter} ${styles.justifyBetween}`}>
                        <div>
                          <h3 className={styles.cardTitle}>هيكل الدورة (أجزاء - أقسام فرعية - عناصر)</h3>
                          <p className={styles.cardDescription}>قم بتنظيم محتوى الدورة في أجزاء وأقسام فرعية - كل مستوى يمكن أن يحتوي على فيديو</p>
                        </div>
                        <button 
                          type="button" 
                          onClick={addPart} 
                          className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonSmall}`}
                        >
                          <Plus size={16} />
                          إضافة جزء
                        </button>
                      </div>
                    </div>
                    <div className={styles.cardContent}>
                      <div className={styles.courseStructure}>
                        <div className={`${styles.flexCol} ${styles.gap4}`}>
                          {courseParts.map((part, partIndex) => (
                            <div key={part.id} className={styles.partCard}>
                              <div className={styles.partHeader}>
                                <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap4}`}>
                                  <div className={`${styles.flexCol} ${styles.gap2} ${styles.flex}`} style={{flex: 1}}>
                                    <input
                                      value={part.title}
                                      onChange={(e) => updatePartTitle(part.id, e.target.value)}
                                      placeholder={`الجزء ${partIndex + 1}: العنوان`}
                                      className={`${styles.input} ${styles.fontMedium}`}
                                    />
                                    <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap2}`}>
                                      <input
                                        type="url"
                                        value={part.videoUrl || ''}
                                        onChange={(e) => updatePartVideo(part.id, e.target.value)}
                                        placeholder="رابط فيديو الجزء (اختياري)"
                                        className={`${styles.input} ${styles.textSm}`}
                                      />
                                      <button
                                        type="button"
                                        className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonSmall}`}
                                        title="رفع فيديو"
                                      >
                                        <Upload size={16} />
                                      </button>
                                    </div>
                                  </div>
                                  <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap2}`}>
                                    <button
                                      type="button"
                                      onClick={() => addSubpart(part.id)}
                                      className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonSmall}`}
                                      title="إضافة قسم فرعي"
                                    >
                                      <Plus size={16} />
                                    </button>
                                    <button
                                      type="button"
                                      onClick={() => removePart(part.id)}
                                      className={`${styles.button} ${styles.buttonDanger} ${styles.buttonSmall}`}
                                    >
                                      <Trash2 size={16} />
                                    </button>
                                  </div>
                                </div>
                              </div>
                              
                              {part.subparts.length > 0 && (
                                <div className={styles.cardContent}>
                                  <div className={`${styles.flexCol} ${styles.gap4}`} style={{marginRight: '1rem'}}>
                                    {part.subparts.map((subpart, subpartIndex) => (
                                      <div key={subpart.id} className={styles.subpartCard}>
                                        <div className={styles.subpartContent}>
                                          <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap4} ${styles.mb4}`}>
                                            <div className={`${styles.flexCol} ${styles.gap2} ${styles.flex}`} style={{flex: 1}}>
                                              <input
                                                value={subpart.title}
                                                onChange={(e) => updateSubpartTitle(part.id, subpart.id, e.target.value)}
                                                placeholder={`القسم الفرعي ${partIndex + 1}.${subpartIndex + 1}: العنوان`}
                                                className={`${styles.input} ${styles.textSm}`}
                                              />
                                              <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap2}`}>
                                                <input
                                                  type="url"
                                                  value={subpart.videoUrl || ''}
                                                  onChange={(e) => updateSubpartVideo(part.id, subpart.id, e.target.value)}
                                                  placeholder="رابط فيديو القسم الفرعي (اختياري)"
                                                  className={`${styles.input} ${styles.textSm}`}
                                                />
                                                <button
                                                  type="button"
                                                  className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonSmall}`}
                                                  title="رفع فيديو"
                                                >
                                                  <Upload size={16} />
                                                </button>
                                              </div>
                                            </div>
                                            <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap2}`}>
                                              <button
                                                type="button"
                                                onClick={() => addItem(part.id, subpart.id)}
                                                className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonSmall}`}
                                                title="إضافة عنصر"
                                              >
                                                <Video size={16} />
                                              </button>
                                              <button
                                                type="button"
                                                onClick={() => removeSubpart(part.id, subpart.id)}
                                                className={`${styles.button} ${styles.buttonDanger} ${styles.buttonSmall}`}
                                              >
                                                <Trash2 size={16} />
                                              </button>
                                            </div>
                                          </div>
                                          
                                          {subpart.items.length > 0 && (
                                            <div className={`${styles.flexCol} ${styles.gap2}`} style={{marginRight: '1rem'}}>
                                              {subpart.items.map((item, itemIndex) => (
                                                <div key={item.id} className={styles.itemCard}>
                                                  <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap2}`}>
                                                    <div className={`${styles.flexCol} ${styles.gap2} ${styles.flex}`} style={{flex: 1}}>
                                                      <input
                                                        value={item.title}
                                                        onChange={(e) => updateItemTitle(part.id, subpart.id, item.id, e.target.value)}
                                                        placeholder={`العنصر ${itemIndex + 1}: العنوان`}
                                                        className={`${styles.input} ${styles.textSm}`}
                                                      />
                                                      <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap2}`}>
                                                        <input
                                                          type="url"
                                                          value={item.videoUrl}
                                                          onChange={(e) => updateItemVideo(part.id, subpart.id, item.id, e.target.value)}
                                                          placeholder="رابط الفيديو *"
                                                          className={`${styles.input} ${styles.textSm}`}
                                                        />
                                                        <button
                                                          type="button"
                                                          className={`${styles.button} ${styles.buttonSecondary} ${styles.buttonSmall}`}
                                                          title="رفع فيديو"
                                                        >
                                                          <Upload size={16} />
                                                        </button>
                                                      </div>
                                                    </div>
                                                    <button
                                                      type="button"
                                                      onClick={() => removeItem(part.id, subpart.id, item.id)}
                                                      className={`${styles.button} ${styles.buttonDanger} ${styles.buttonSmall}`}
                                                    >
                                                      <Trash2 size={16} />
                                                    </button>
                                                  </div>
                                                </div>
                                              ))}
                                            </div>
                                          )}
                                        </div>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}
                            </div>
                          ))}
                          
                          {courseParts.length === 0 && (
                            <div className={styles.emptyState}>
                              <BookOpen className={styles.emptyStateIcon} />
                              <p>لم يتم إضافة أي أجزاء بعد</p>
                              <p className={styles.textSm}>انقر على "إضافة جزء" لبدء تنظيم الدورة</p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className={`${styles.flex} ${styles.justifyBetween} ${styles.gap4}`} style={{justifyContent: 'flex-end'}}>
                    <button 
                      type="button" 
                      onClick={() => setActiveTab('dashboard')}
                      className={`${styles.button} ${styles.buttonSecondary}`}
                    >
                      إلغاء
                    </button>
                    <button 
                      type="submit" 
                      className={`${styles.button} ${styles.buttonPrimary}`}
                    >
                      إنشاء الدورة
                    </button>
                  </div>
                </form>
              </div>
            )}

            {/* Courses Management Tab */}
            {activeTab === 'courses' && (
              <div className={`${styles.flexCol} ${styles.gap6}`}>
                <div className={`${styles.flex} ${styles.itemsCenter} ${styles.justifyBetween}`}>
                  <h2 className={styles.text3xl}>إدارة الدورات</h2>
                  <button 
                    onClick={() => setActiveTab('create')} 
                    className={`${styles.button} ${styles.buttonPrimary}`}
                  >
                    <Plus size={16} />
                    إضافة دورة جديدة
                  </button>
                </div>

                {courses.length === 0 ? (
                  <div className={styles.card}>
                    <div className={styles.cardContent}>
                      <div className={styles.emptyState}>
                        <BookOpen className={styles.emptyStateIcon} />
                        <h3 className={`${styles.textLg} ${styles.fontMedium} ${styles.textGray900} ${styles.mb2}`}>لا توجد دورات بعد</h3>
                        <p className={`${styles.textGray500} ${styles.mb4}`}>ابدأ بإنشاء دورتك الأولى</p>
                        <button 
                          onClick={() => setActiveTab('create')} 
                          className={`${styles.button} ${styles.buttonPrimary}`}
                        >
                          <Plus size={16} />
                          إضافة دورة جديدة
                        </button>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className={`${styles.grid} ${styles.gridCols2} ${styles.gap6}`}>
                    {courses.map((course) => (
                      <div key={course.id} className={`${styles.card} ${styles.hoverShadow} ${styles.transition}`}>
                        <div className={styles.cardHeader}>
                          <div className={`${styles.flex} ${styles.itemsCenter} ${styles.justifyBetween} ${styles.mb2}`}>
                            <span className={styles.badge}>{course.category}</span>
                            <span className={`${styles.textSm} ${styles.textGray500}`}>
                              {course.createdAt.toLocaleDateString('ar-SA')}
                            </span>
                          </div>
                          <h3 className={`${styles.textXl} ${styles.fontMedium} ${styles.mb2}`}>{course.title}</h3>
                          <p className={`${styles.cardDescription} ${styles.lineClamp2}`}>
                            {course.description}
                          </p>
                        </div>
                        <div className={styles.cardContent}>
                          <div className={`${styles.flexCol} ${styles.gap4}`}>
                            <div className={`${styles.flex} ${styles.itemsCenter} ${styles.justifyBetween} ${styles.textSm}`}>
                              <div className={`${styles.flex} ${styles.itemsCenter} ${styles.gap4}`}>
                                <span className={`${styles.flex} ${styles.itemsCenter} ${styles.gap1}`}>
                                  <BookOpen size={16} />
                                  {course.parts.length} جزء
                                </span>
                                <span className={`${styles.flex} ${styles.itemsCenter} ${styles.gap1}`}>
                                  <Video size={16} />
                                  {getTotalItems(course)} فيديو
                                </span>
                              </div>
                            </div>
                            
                            <hr style={{border: 'none', borderTop: '1px solid #e5e7eb'}} />
                            
                            <div className={`${styles.flexCol} ${styles.gap2}`}>
                              <h4 className={`${styles.fontMedium} ${styles.textSm}`}>محتوى الدورة:</h4>
                              <div className={`${styles.flexCol} ${styles.gap1} ${styles.textSm} ${styles.textGray600}`}>
                                {course.parts.map((part, index) => (
                                  <div key={part.id} className={`${styles.flex} ${styles.itemsCenter} ${styles.gap2}`}>
                                    <ChevronRight size={12} />
                                    <span style={{overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap'}}>
                                      {part.title || `الجزء ${index + 1}`}
                                      <span className={`${styles.textGray500} ${styles.mr2}`}>
                                        ({part.subparts.length} قسم)
                                        {part.videoUrl && <span className={styles.textBlue500}> • فيديو</span>}
                                      </span>
                                    </span>
                                  </div>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Toast Notification */}
      {showToast && (
        <div 
          style={{
            position: 'fixed',
            top: '1rem',
            right: '1rem',
            backgroundColor: toastType === 'success' ? '#10b981' : '#ef4444',
            color: 'white',
            padding: '1rem',
            borderRadius: '0.5rem',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',
            zIndex: 1000,
            maxWidth: '400px'
          }}
        >
          {toastMessage}
        </div>
      )}
    </div>
  );
} '''